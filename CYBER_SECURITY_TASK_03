TASK- 03
"Password Complexity Checker"

import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import string
import secrets
import pyperclip

def check_password_strength(password):
    strength = 0
    remarks = ''
    lower_count = upper_count = num_count = wspace_count = special_count = 0

    for char in password:
        if char in string.ascii_lowercase:
            lower_count += 1
        elif char in string.ascii_uppercase:
            upper_count += 1
        elif char in string.digits:
            num_count += 1
        elif char == ' ':
            wspace_count += 1
        else:
            special_count += 1

    if lower_count >= 1:
        strength += 1
    if upper_count >= 1:
        strength += 1
    if num_count >= 1:
        strength += 1
    if wspace_count >= 1:
        strength += 1
    if special_count >= 1:
        strength += 1

    if strength == 1:
        remarks = "That's a very bad password. Change it as soon as possible."
    elif strength == 2:
        remarks = "That's a weak password. Consider using a tougher one."
    elif strength == 3:
        remarks = "Your password is okay, but could be improved."
    elif strength == 4:
        remarks = "Your password is strong. You could make it even stronger."
    elif strength == 5:
        remarks = "Excellent! Very strong password."

    return (
        f"Password Length: {len(password)}\n"
        f"Lowercase letters: {lower_count}\n"
        f"Uppercase letters: {upper_count}\n"
        f"Digits: {num_count}\n"
        f"Whitespaces: {wspace_count}\n"
        f"Special characters: {special_count}\n"
        f"Password Score: {strength}/5\nRemarks: {remarks}"
    ), strength

def check_password():
    password = password_entry.get()
    result, strength = check_password_strength(password)
    output_text.config(state='normal')
    output_text.delete('1.0', 'end')
    output_text.insert('end', result)
    output_text.config(state='disabled')
    if strength < 3:
        strength_meter["style"] = "Red.Horizontal.TProgressbar"
    elif strength < 5:
        strength_meter["style"] = "Orange.Horizontal.TProgressbar"
    else:
        strength_meter["style"] = "Green.Horizontal.TProgressbar"
    animate_progress_bar(strength_meter, strength * 20, 0)

def generate_password():
    password = ''.join(secrets.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(12))
    password_entry.delete(0, 'end')
    password_entry.insert('end', password)

def copy_password():
    password = password_entry.get()
    if password:
        pyperclip.copy(password)
        messagebox.showinfo("Password Copied", "Password copied to clipboard!")
    else:
        messagebox.showwarning("No Password", "Please enter or generate a password first.")

def clear_input():
    password_entry.delete(0, 'end')
    output_text.config(state='normal')
    output_text.delete('1.0', 'end')
    output_text.config(state='disabled')
    strength_meter["value"] = 0

def on_closing():
    if messagebox.askokcancel("Quit", "Do you want to quit?"):
        root.destroy()

def animate_progress_bar(progressbar, target_value, current_value):
    if current_value < target_value:
        progressbar["value"] = current_value
        root.after(10, animate_progress_bar, progressbar, target_value, current_value + 1)

# GUI SETUP
root = tk.Tk()
root.title("Password Strength Checker")
root.geometry("700x450")
root.configure(bg="#e6f2ff")

style = ttk.Style()
style.theme_use('default')
style.configure("Red.Horizontal.TProgressbar", foreground='red', background='red')
style.configure("Orange.Horizontal.TProgressbar", foreground='orange', background='orange')
style.configure("Green.Horizontal.TProgressbar", foreground='green', background='green')

frame = tk.Frame(root, bg="#e6f2ff")
frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

label = tk.Label(frame, text="Enter Password:", bg="#e6f2ff", fg="black", font=("Arial", 14, "bold"))
label.grid(row=0, column=0, padx=5, pady=10, sticky="e")

password_entry = tk.Entry(frame, show="*", font=("Arial", 12), width=35)
password_entry.grid(row=0, column=1, padx=5, pady=10, sticky="w")

# SHUFFLED BUTTON COLORS
check_button = tk.Button(frame, text="Check Strength", command=check_password, bg="#4CAF50", fg="white", font=("Arial", 12))
check_button.grid(row=1, column=0, pady=10, padx=5, sticky="we")

generate_button = tk.Button(frame, text="Generate", command=generate_password, bg="#008CBA", fg="white", font=("Arial", 12))
generate_button.grid(row=1, column=1, pady=10, padx=5, sticky="we")

copy_button = tk.Button(frame, text="Copy", command=copy_password, bg="#f44336", fg="white", font=("Arial", 12))
copy_button.grid(row=1, column=2, pady=10, padx=5, sticky="we")

clear_button = tk.Button(frame, text="Clear", command=clear_input, bg="#ff9800", fg="white", font=("Arial", 12))
clear_button.grid(row=1, column=3, pady=10, padx=5, sticky="we")

output_text = tk.Text(frame, height=10, width=70, state='disabled', font=("Courier New", 10))
output_text.grid(row=2, column=0, columnspan=4, pady=10, padx=5)

strength_meter = ttk.Progressbar(frame, orient=tk.HORIZONTAL, length=550, mode='determinate', value=0,
                                 style="Red.Horizontal.TProgressbar")
strength_meter.grid(row=3, column=0, columnspan=4, pady=12)

password_entry.bind("<KeyRelease>", lambda event: check_password())

root.protocol("WM_DELETE_WINDOW", on_closing)
root.mainloop()
