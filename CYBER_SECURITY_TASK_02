import tkinter
from tkinter import *
import tkinter as tk
import tkinter.messagebox as mbox
from tkinter import ttk
from tkinter import filedialog
from PIL import ImageTk, Image
import cv2
import os
import numpy as np

window = Tk()
window.geometry("500x350")
window.title("Image Encryption Decryption")

panelA = None
panelB = None
x = None
image_encrypted = None
key = None
eimg = None
filename = None


def openfilename():
    filename = filedialog.askopenfilename(title='Open', filetypes=[("Image files", ".png;.jpg;*.jpeg")])
    return filename


def open_img():
    global x, panelA, panelB, eimg
    x = openfilename()
    if x:
        img = Image.open(x).convert('L')
        img = img.resize((120, 150))
        eimg = img
        img = ImageTk.PhotoImage(img)
        if panelA is None or panelB is None:
            panelA = Label(image=img)
            panelA.image = img
            panelA.pack(side="left", padx=5, pady=5)

            panelB = Label(image=img)
            panelB.image = img
            panelB.pack(side="right", padx=5, pady=5)
        else:
            panelA.configure(image=img)
            panelB.configure(image=img)
            panelA.image = img
            panelB.image = img
    else:
        mbox.showwarning("Warning", "No image selected.")


def en_fun(x):
    global image_encrypted, key
    image_input = cv2.imread(x, 0)
    if image_input is not None:
        image_input = cv2.resize(image_input, (120, 150))
        (x1, y) = image_input.shape
        image_input = image_input.astype(float) / 255.0
        mu, sigma = 0, 0.1
        key = np.random.normal(mu, sigma, (x1, y)) + np.finfo(float).eps
        image_encrypted = image_input / key
        cv2.imwrite('image_encrypted.jpg', image_encrypted * 255)
        imge = Image.open('image_encrypted.jpg')
        imge = imge.resize((120, 150))
        imge = ImageTk.PhotoImage(imge)
        panelB.configure(image=imge)
        panelB.image = imge
        mbox.showinfo("Encrypt Status", "Image Encrypted successfully.")


def de_fun():
    global image_encrypted, key
    if image_encrypted is not None and key is not None:
        image_output = image_encrypted * key
        image_output *= 255.0
        cv2.imwrite('image_output.jpg', image_output)
        imgd = Image.open('image_output.jpg')
        imgd = imgd.resize((120, 150))
        imgd = ImageTk.PhotoImage(imgd)
        panelB.configure(image=imgd)
        panelB.image = imgd
        mbox.showinfo("Decrypt Status", "Image decrypted successfully.")
    else:
        mbox.showwarning("Warning", "Image not encrypted yet.")


def reset():
    global x, eimg
    if x is not None:
        image = Image.open(x).convert('L')
        image = image.resize((120, 150))
        eimg = image
        image = ImageTk.PhotoImage(image)
        panelB.configure(image=image)
        panelB.image = image
        mbox.showinfo("Success", "Image reset to original format!")
    else:
        mbox.showwarning("Warning", "No image selected.")


def exit_win():
    if mbox.askokcancel("Exit", "Do you want to exit?"):
        window.destroy()


Label(text="Image Encryption", font=("Arial", 18), fg="blue").pack(pady=10)

Button(window, text="Choose", command=open_img, font=("Arial", 12), bg="orange", fg="blue").pack(pady=5)
Button(window, text="Encrypt", command=lambda: en_fun(x), font=("Arial", 12), bg="light green", fg="blue").pack(pady=5)
Button(window, text="Decrypt", command=de_fun, font=("Arial", 12), bg="orange", fg="blue").pack(pady=5)
Button(window, text="Reset", command=reset, font=("Arial", 12), bg="yellow", fg="blue").pack(pady=5)
Button(window, text="Exit", command=exit_win, font=("Arial", 12), bg="red", fg="white").pack(pady=5)

window.protocol("WM_DELETE_WINDOW", exit_win)
window.mainloop()
